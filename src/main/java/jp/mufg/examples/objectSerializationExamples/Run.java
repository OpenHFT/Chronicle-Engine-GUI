package jp.mufg.examples.objectSerializationExamples;

import jp.mufg.api.util.*;
import net.openhft.chronicle.*;
import net.openhft.chronicle.tools.*;
import net.openhft.lang.model.*;

import java.io.*;
import java.util.*;

import static junit.framework.TestCase.assertFalse;
import static org.junit.Assert.assertTrue;

/**
 * Created by daniels on 26/02/2015.
 */
public class Run
{
    public static void main(String[] args)
    {
        //This writes two objects to the queue for some reason
//        runObjectWithEnumExample();

        //This writes two objects to the queue for some reason
        runObjectWithoutEnumExample();

        //This only writes one object to the queue as expected
        runObjectWithoutEnumAutoGeneratedClassExample();

        //This only writes one object to the queue as expected
        runObjectWithoutEnumExternalizable();

        //This only writes one object to the queue as expected
//        runObjectWithEnumExternalizable();


        //Having an Externalizable object and a map as arguments

        //This writes two objects to the queue for some reason
//        runObjectWithEnumExternalizableAndStringObjectMap();

        //This writes two objects to the queue for some reason
        runObjectWithEnumExternalizableAndEnumObjectMap();
    }

    private static void runObjectWithEnumExample()
    {
        try
        {
            String chronicleQueueBase = "C:\\LocalFolder\\Chronicle\\data";
            Chronicle chronicle = ChronicleQueueBuilder.vanilla(chronicleQueueBase).build();
            ChronicleTools.deleteDirOnExit(chronicleQueueBase);

            EnumTestImpl enumTest = new EnumTestImpl();

            EnumTest writer = ToChronicle.of(EnumTest.class, chronicle);
            FromChronicle<EnumTestImpl> reader = FromChronicle.of(enumTest, chronicle.createTailer());

            ObjectWithEnum objectWithEnum = new ObjectWithEnum();
            objectWithEnum.setSomeString("some random string");
            objectWithEnum.setTestEnum(TestEnum.TEST1);

            //Put on queue
            writer.writeObjectWithEnum(objectWithEnum);

            //This should read the MapMarketDataUpdate from the queue and call the implementation
            assertTrue(reader.readOne());
            assertFalse(reader.readOne());
            assertFalse(reader.readOne());

        }
        catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private static void runObjectWithoutEnumExample()
    {
        try
        {
            String chronicleQueueBase = "C:\\LocalFolder\\Chronicle\\data";
            Chronicle chronicle = ChronicleQueueBuilder.vanilla(chronicleQueueBase).build();
            ChronicleTools.deleteDirOnExit(chronicleQueueBase);

            EnumTestImpl enumTest = new EnumTestImpl();

            EnumTest writer = ToChronicle.of(EnumTest.class, chronicle);
            FromChronicle<EnumTestImpl> reader = FromChronicle.of(enumTest, chronicle.createTailer());

            ObjectWithoutEnum objectWithoutEnum = new ObjectWithoutEnum();
            objectWithoutEnum.setSomeString("some random string");
            objectWithoutEnum.setSomeDouble(1.0);
            objectWithoutEnum.setSomeInt(42);

            //Put on queue
            writer.writeObjectWithoutEnum(objectWithoutEnum);

            //This should read the MapMarketDataUpdate from the queue and call the implementation
            assertTrue(reader.readOne());
            assertFalse(reader.readOne());
            assertFalse(reader.readOne());

        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private static void runObjectWithoutEnumAutoGeneratedClassExample()
    {
        try
        {
            String chronicleQueueBase = "C:\\LocalFolder\\Chronicle\\data";
            Chronicle chronicle = ChronicleQueueBuilder.vanilla(chronicleQueueBase).build();
            ChronicleTools.deleteDirOnExit(chronicleQueueBase);

            EnumTestImpl enumTest = new EnumTestImpl();

            EnumTest writer = ToChronicle.of(EnumTest.class, chronicle);
            FromChronicle<EnumTestImpl> reader = FromChronicle.of(enumTest, chronicle.createTailer());

            ObjectWithoutEnumDataValueClass objectWithoutEnumDataValueClass = DataValueClasses.newInstance(ObjectWithoutEnumDataValueClass.class);
            objectWithoutEnumDataValueClass.setSomeString("some random string");
            objectWithoutEnumDataValueClass.setSomeDouble(1.0);
            objectWithoutEnumDataValueClass.setSomeInt(42);

            //Put on queue
            writer.writeObjectWithoutEnumDataValueClass(objectWithoutEnumDataValueClass);

            //This should read the MapMarketDataUpdate from the queue and call the implementation
            assertTrue(reader.readOne());
            assertFalse(reader.readOne());
            assertFalse(reader.readOne());

        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private static void runObjectWithoutEnumExternalizable()
    {
        try
        {
            String chronicleQueueBase = "C:\\LocalFolder\\Chronicle\\data";
            Chronicle chronicle = ChronicleQueueBuilder.vanilla(chronicleQueueBase).build();
            ChronicleTools.deleteDirOnExit(chronicleQueueBase);

            EnumTestImpl enumTest = new EnumTestImpl();

            EnumTest writer = ToChronicle.of(EnumTest.class, chronicle);
            FromChronicle<EnumTestImpl> reader = FromChronicle.of(enumTest, chronicle.createTailer());

            ObjectWithoutEnumExternalizable objectWithoutEnumExternalizable = new ObjectWithoutEnumExternalizable();
            objectWithoutEnumExternalizable.setSomeString("some random string");
            objectWithoutEnumExternalizable.setSomeDouble(1.0);
            objectWithoutEnumExternalizable.setSomeInt(42);

            //Put on queue
            writer.writeObjectWithoutEnumExternalizable(objectWithoutEnumExternalizable);

            //This should read the MapMarketDataUpdate from the queue and call the implementation
            assertTrue(reader.readOne());
            assertFalse(reader.readOne());
            assertFalse(reader.readOne());

        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private static void runObjectWithEnumExternalizable()
    {
        try
        {
            String chronicleQueueBase = "C:\\LocalFolder\\Chronicle\\data";
            Chronicle chronicle = ChronicleQueueBuilder.vanilla(chronicleQueueBase).build();
            ChronicleTools.deleteDirOnExit(chronicleQueueBase);

            EnumTestImpl enumTest = new EnumTestImpl();

            EnumTest writer = ToChronicle.of(EnumTest.class, chronicle);
            FromChronicle<EnumTestImpl> reader = FromChronicle.of(enumTest, chronicle.createTailer());

            ObjectWithEnumExternalizable objectWithEnumExternalizable = new ObjectWithEnumExternalizable();
            objectWithEnumExternalizable.setSomeString("some random string");
            objectWithEnumExternalizable.setTestEnum(TestEnum.RANDOM);

            //Put on queue
            writer.writeObjectWithEnumExternalizable(objectWithEnumExternalizable);

            //This should read the MapMarketDataUpdate from the queue and call the implementation
            assertTrue(reader.readOne());
            assertFalse(reader.readOne());
            assertFalse(reader.readOne());

        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }


    private static void runObjectWithEnumExternalizableAndStringObjectMap()
    {
        try
        {
            String chronicleQueueBase = "C:\\LocalFolder\\Chronicle\\data";
            Chronicle chronicle = ChronicleQueueBuilder.vanilla(chronicleQueueBase).build();
            ChronicleTools.deleteDirOnExit(chronicleQueueBase);

            EnumTestImpl enumTest = new EnumTestImpl();

            EnumTest writer = ToChronicle.of(EnumTest.class, chronicle);
            FromChronicle<EnumTestImpl> reader = FromChronicle.of(enumTest, chronicle.createTailer());

            ObjectWithEnumExternalizable objectWithEnumExternalizable = new ObjectWithEnumExternalizable();
            objectWithEnumExternalizable.setSomeString("some random string");
            objectWithEnumExternalizable.setTestEnum(TestEnum.RANDOM);

            Map<String, Object> stringObjectMap = new HashMap<>();
            stringObjectMap.put("String1", "newString");
            stringObjectMap.put("Double1", 2.0);

            //Put on queue
            writer.writeObjectWithEnumExternalizableAndStringObjectMap(objectWithEnumExternalizable, stringObjectMap);

            //Read from queue
            Assert.check(reader.readOne());
            Assert.check(!reader.readOne());
            Assert.check(!reader.readOne());

        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }

    private static void runObjectWithEnumExternalizableAndEnumObjectMap()
    {
        try
        {
            String chronicleQueueBase = "C:\\LocalFolder\\Chronicle\\data";
            Chronicle chronicle = ChronicleQueueBuilder.vanilla(chronicleQueueBase).build();
            ChronicleTools.deleteDirOnExit(chronicleQueueBase);

            EnumTestImpl enumTest = new EnumTestImpl();

            EnumTest writer = ToChronicle.of(EnumTest.class, chronicle);
            FromChronicle<EnumTestImpl> reader = FromChronicle.of(enumTest, chronicle.createTailer());

            ObjectWithEnumExternalizable objectWithEnumExternalizable = new ObjectWithEnumExternalizable();
            objectWithEnumExternalizable.setSomeString("some random string");
            objectWithEnumExternalizable.setTestEnum(TestEnum.RANDOM);

            Map<TestEnum, Object> enumObjectMap = new HashMap<>();
            enumObjectMap.put(TestEnum.RANDOM, "StringValue");
            enumObjectMap.put(TestEnum.TEST2, 2.1);

            //Put on queue
            writer.writeObjectWithEnumExternalizableAndEnumObjectMap(objectWithEnumExternalizable, enumObjectMap);

            //Read from queue
            Assert.check(reader.readOne());
            Assert.check(!reader.readOne());
            Assert.check(!reader.readOne());

        } catch (IOException e)
        {
            e.printStackTrace();
        }
    }
}