Internal Events
This section describes how to use Chronicle’s Periodic updates and Polling updates to create periodic events or events when a specified condition is met. Periodic updates and Polling updates are events generated by services and are written to the services' first input queue by default. The input queues are replayed when a service restarts, this allows the service can recreate the same state it had before the restart.
Receiving these events invokes related methods (described in the next sections) that can be overridden to do works as desired.
Do not create your threads to send periodic events, using perhaps a newSingleThreadScheduledExecutor(). This makes it complex to recreate the service’s state whenever it is restarted.
GettingStarted/Example2/Periodic Updates Demo explores these topics with a runnable example.
1. Implementation Key Points
In implementing the framework-generated events the following points should be taken into account.
1.1. Service Idleness
A key concept for both types of events is the idleness of the service. The service is idle when it consumed all its inputs and is awaiting new inputs. These events are only triggered when the service is idle. This means if the service has a burst of events in one (or more) of its inputs, these events will be delayed.
As Periodic and Polling update events can be delayed due to burst of input events, do not rely on them for timings.
1.2. Threading Model
Implementing framework-generated events does not change the service threading model i.e. the service remains single-threaded when implementing framework-generated events, meaning these events are handled in the same thread as other service activities. Therefore, if the thread is busy servicing other events, framework-generated events may be delayed.
1.3. Avoiding Duplicate Updates
Care has to be taken to avoid unwanted propagation of these events to other services. For example, if two services; A and B, consume queue X and both write framework-generated events in queue X, then each service which reads outputs from both A and B, could receive events (as the result of A and B outputs) from both A and B, which might be undesired.
To avoid event pollution, create dedicated queues for each service consuming these events.
2. Periodic Updates
Periodic updates are events that occur at specific time intervals, e.g. every 2,000 ms. To generate Periodic updates, the service should implement the PeriodicUpdateSource interface and override periodicUpdate(long timestampMs). The configuration file should specify how often Periodic updates are generated. The following YAML file configures service-one and sets the interval of generating Periodic updates to 15000 ms while the first event is generated 5000 ms after the service starts. The Periodic events are written into the service-in queue.
Configuring a service receiving Periodic updates
!ChronicleServicesCfg {
 queues: {
   service-in: { path: data/service-in, sourceId: 1 },
   service-out: { path: data/service-out, sourceId: 2 },
 },
 services: {
   service-one: {
     inputs: [ service-in ],
     output: service-out,
     implClass: !type software.chronicle.services.demo.ServiceOne,
     periodicUpdateMS: 15000,
     periodicUpdateMSInitial: 5000
   },
 },
}
Sets the update frequency to 15 seconds.
Sets the initial update to be sent 5 seconds after the service has started up. This is an optional setting and defaults to periodicUpdateMS if omitted.
The implementing class of service-one implements PeriodicUpdateSource and overrides periodicUpdate(long).
ServiceOne receive periodic events
public class ServiceOne implements PeriodicUpdateSource {
   ...

   // With the above configuration this method will be called every 15,000 ms
   @Override
   public void periodicUpdate(long l) {
   ...
   }
}
ServiceOne can receive other events in its input queues, for example:
public interface ServiceIn extends PeriodicUpdateSource {

   void inputData(InputData inputData);
}
ServiceOne receives periodic events
public class ServiceOne implements ServiceIn {
   ...
  @Override
   public void inputData(InputData inputData) {
   ...
   }

   // With the above configuration this method will be called every 15,000 ms
   @Override
   public void periodicUpdate(long l) {
   ...
   }
}
As explained above, the periodicUpdateMS interval cannot be relied upon for any time-based calculations, as the event may be delayed if the service wasn’t idle.
