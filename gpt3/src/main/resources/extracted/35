Queue Replication
Chronicle Queue has been integrated with Chronicle Services to support state management, messaging between services, and message persistence. In addition, for replication of queues on remote hosts using TCP/IP, Chronicle Services framework uses Chronicle Queue Enterprise. This document first explains why queue replication is used, and describes the key features of queue replication as well as how this applies to Chronicle Services.
1. Background
A key requirement for many enterprise class software applications is the ability to prevent data loss. The financial sector, as an example, may be highly sensitive to such issues since they may affect the availability of auditing data as well as calculation processes.
Chronicle Services uses Chronicle Queue as the means of messaging between application components. This will naturally imply persistent storage of data since Chronicle Queue is persistent. However, guarantees that data is successfully persisted introduces delays (since persistent storage access times are significantly greater than memory access times), and these have been deemed unacceptable over many years even for normal operations in operating systems. Unix has implemented its normal I/O in an asynchronous manner for this reason, and database systems utilise sophisticated strategies to guarantee reliable persistence of data. In systems and applications where latencies must be minimised this approach would be completely unacceptable.
Chronicleâ€™s use of memory mapped files to represent queues means that "writes" to queues will be very fast, since these will involve writes to memory. However, it also presents a window of time when the data written to the mapped memory is not synchronised with the mapped file. If the system were to stop before this output had been completed then we would be left with inconsistencies arising from lost messages.
To address these issues, Chronicle Services supports the replication of queues across multiple hosts. Messages written to a queue will be copied to replicas of the queue on different hosts, ensuring that multiple copies of the queue exist. This reduces the likelihood of all queues being subject to the data loss problem described here to almost zero.
It can be shown that the time taken to replicate writes across a TCP network to another queue is substantially less than the time taken to perform a synchronous write operation to a local disk, so replication can be achieved without a significant impact on write performance.