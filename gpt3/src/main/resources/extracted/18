6.2 Sending Events to an External Sink
Problem
You want to receive messages generated by a Chronicle Services Application in an external component.
Solution
Obtain a handle to the service's output Queue read messages from it.
Discussion
A Chronicle Service uses Chronicle Queue as the transport for messages into and out of the service. A public API allows 
access to to a queue for reading or writing messages, however it is necessary to know the pathname used by the 
queue for its backing storage to set up the handle. Fortunately this information is available in the services.yaml 
file, so this can be used as part of the initialisation process.
The example shown here is based on the Transaction service from earlier recipes. The downstream service has been 
removed from the application, and replaced with an external application that reads messages from the service's 
output queue and logs them, for information.
The application architecture is shown below:
 
The External Sink Application
Instead of the Downstream service seen in earlier recipes, output messages are handled in the external application: 
SinkMain:
Listing 65. External sink application to consume events from the Transaction Service
 
 
1.	The name of the config file for the application, which will have the necessary information about the service's input 
queue.
2.	Read and parse the configuration file so queue information can be fetched.
3.	Fetch information about the service from which we are reading messages (transactionSvc), and from that 
retrieve the names of the output queue.
4.	Create an instance of a class that implements the transaction service's output API. These are the methods that will 
be called when the corresponding messages are detected.
5.	Create a Queue handle for the service's output queue.
6.	Create a MethodReader for the queue, that reads messages from the queue and dispatches them to the handler 
defined in <4>.
7.	For demonstration purposes, this application simply reads messages from the queue with the MethodReader, 
and handles them.
To keep things simple in the demonstration, there is no lifetime management in this application; it will keep reading 
and handling messages until interrupted and terminated.
Running the Applications
The main service should be started first, since it clears out all stale data that may be in the queues following earlier 
runs. Diagnostics from the transaction service will show the input messages being received and processed, but not any 
output messages:
Listing 66. Log excerpt from Transaction Service showing events being processed
[main/transactionSvc] INFO TransactionSvcImpl - Adding account 34343434 with 
initial balance:
100.0 [main/transactionSvc] INFO TransactionSvcImpl - Adding account 45454545 
with initial balance:
200.0
[main/transactionSvc] INFO TransactionSvcImpl - Applying DEBIT of 100.0 to 
account 34343434
[main/transactionSvc] INFO TransactionSvcImpl - Succeeded: Balance of account 
34343434 is now 0.0
[main/transactionSvc] INFO TransactionSvcImpl - Applying DEBIT of 50.0 to account 
34343434
[main/transactionSvc] INFO TransactionSvcImpl - Bad transaction: Account 34343434 
has
insufficient funds for debit: 50.0 [0.0]
[main/transactionSvc] INFO TransactionSvcImpl - Applying CREDIT of 10.0 to 
account 45454545
[main/transactionSvc] INFO TransactionSvcImpl - Succeeded: Balance of account 
45454545 is now
210.0
[main/transactionSvc] INFO TransactionSvcImpl - Applying CREDIT of 10.0 to 
account 999999
[main/transactionSvc] ERROR TransactionSvcImpl - Unknown account number: 999999
Run this example by clicking on the button below:
<button onclick="run('cd SERVICES-COOKBOOK && cd Example6b && ./runDemo.sh')" 
class="btn btn-primary btn-run">Run</button>
Notice how the log messages all originate from main/transactionSvc.
Now if the Sink application is run, the output messages from the services can be seen:
Listing 67. Log excerpt from external event sink showing output events from Transaction Service
[main] INFO SinkMain - **OK** Balance of account 34343434 now 0.0
[main] INFO SinkMain - **FAIL** Insufficient funds 0.0 available for 50.0
[main] INFO SinkMain - **OK** Balance of account 45454545 now 210.0
[main] ERROR SinkMain - 
Error: !software.chronicle.services.cookbook.example6b.dto.AccountError {
  accountNumber: 999999,
  errorMessage: Unknown Account Number,
  priority: MEDIUM
}
These messages can be correlated with the log messages from the service to see that the applications are functioning 
correctly.


7. Additional Features of Services
Overview
This section describes additional functionality that can be added to services for running in the Chronicle Services 
framework.
Recipes
7.1 Periodic Events
Shows how a service can be configured to perform processing at regular intervals.
7.2 Filtering Requests Based On DTO Contents
How a service can choose whether or not to handle a request on its input queue, based on data carried in the message 
payload.
7.3 Performing Work When a Service is Idle
How a service can perform housekeeping or diagnostic processing when there are no incoming requests for it to 
handle.
76 of 134 | Overview
