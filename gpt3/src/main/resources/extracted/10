3.3 Separating Success and Error Handling
Problem
You want to process errors from a service in a completely separate path to successful results.
Solution
Define separate DTOs for errors and add explicit handling to the API.
Discussion
For some classes of errors, it is desirable to completely separate error messages from non error messages that are 
generated by a service. This could be done either at the downstream service for convenience, or for design reasons, 
based on the nature of the error being represented. Consider the situation where a message is sent to the 
Transaction Service containing an account number that does not exist. This is a somewhat more fundamental 
problem than an error in the requested transaction (as described in Recipe 3.1), as it implies that all subsequent 
transactions on that account will fail.
Updating the API to include Error Messages
Since the service may now post a separate message for errors, the output API must be altered to reflect this:
Listing 36. Input interface for Transaction Service
 
The DTO for the error message needs to be defined, this is done like all other DTOs:
Listing 37. DTO for Error Message
 


 
Although it is intended for separate processing, the DTO is defined in the same way as for the success case. By 
extending the SelfDescribingMarshallable class the DTO will be serialized by Chronicle Wire in the expected 
way. In this case the DTO has three pieces of information:
1.	The account number for which the error occurred.
2.	A String describing the error - as before, this can be more sophisticated if required, including further data that 
could help diagnose the root cause of the error.
3.	A priority, which is defined using a Chronicle Services enum type allowing LOW, MEDIUM, HIGH or UNKNOWN to be 
specified.
As it is now part of the API for the service, any component that will receive messages from the service must provide a 
handler for the message. So the downstream service for the Transaction service needs to be extended with a 
handler for AccountErrors:
Listing 38. Downstream handler for AccountError message
  @Override
  public void accountError(AccountError accountError) {
    LOG.error("Error for account {}: {} [{}]",
        accountError.accountNumber(), accountError.errorMessage(), 
accountError.priority());
  }
Here, the method simply logs the occurrence of the error, but of course more sophisticated processing is allowed.
Lastly, the Transaction service will need to contain code that generates and returns the error message if the 
conditions for it are found, so the transaction handler method is modified:
Listing 39. Transaction Service implementation with check for valid account number
 
  private static Logger LOG = LoggerFactory.getLogger(TransactionSvcImpl.class);
  static {
    CLASS_ALIASES.addAlias(Account.class);
  }
  private final TransactionSvcOut out;
  private final Map<Long, Account> balanceByAccount = new HashMap<>();
  private final List<Account> allAccounts = new ArrayList<>();
  private OnTransaction onTransaction = new OnTransaction();
  private AccountError accountError = new AccountError();   
  public TransactionSvcImpl(TransactionSvcOut out) {
    this.out = out;
  }
  @Override
  public void transaction(Transaction transaction) {
    LOG.info("Applying {} of {} to account {}",
        transaction.entry(), transaction.amount(), transaction.accountNumber());
    Account account = 
balanceByAccount.get(transaction.accountNumber());         if 
(account == null) {
      LOG.error("Unknown account number: {}", transaction.accountNumber());
      accountError.reset();
      accountError.accountNumber(transaction.accountNumber())
          .errorMessage("Unknown Account Number")
          .priority(Priority.MEDIUM);
      out.accountError(accountError);
      return;
    }
    onTransaction.reset();
    transaction.copyTo(onTransaction);
    if ((transaction.entry() == Entry.DEBIT) && (account.balance() < 
transaction.amount())) {
      LOG.info("Bad transaction: Account {} has insufficient funds for debit: {} 
[{}]", account
.accountNumber(), transaction.amount(), account.balance());
      out.onTransaction(onTransaction.success(false).reason("Insufficient funds " 
+ account
.balance() + " available for " + transaction.amount()));
      return;
    }
    account.add((transaction.entry() == Entry.CREDIT  transaction.amount() : -
transaction. amount()));
    LOG.info("Succeeded: Balance of account {} is now {}", account.accountNumber(), 
account
.balance());
    out.onTransaction(onTransaction.success(true).reason("Balance of account " + 
account
.accountNumber() + " now " + account.balance()));
  }
  @Override
  public void accounts(List<Account> accounts) {
    for (Account account : accounts) {
 
1.	A single instance of the AccountError DTO is maintained for each service instance. The single threaded nature 
of message handling in a Chronicle Service means that there will be no contention for this object.
2.	If the lookup of the account in the map of known accounts fails, then clear out the existing error DTO, fill in the 
details of the error and post the error message to the output.
Running the Application
With the latest modifications to the application we can observe how the transaction service posts an error to the 
downstream service when it receives transactions for an unknown account.
Log messages will indicate the progress of the application:
Run this demo yourself by clicking on the run button below:
<button onclick="run('cd SERVICES-COOKBOOK && cd Example3b && ./runDemo.sh')" 
class="btn btn-primary btn-run">Run</button>
Listing 40. Log messages from the service
 _____ _                     _      _        _____                 _
/  __ \ |                   (_)    | |      /  ___|               (_)
| /  \/ |__  _ __ ___  _ __  _  ___| | ___  \ `--.  ___ _ ____   ___  ___ ___  
___
| |   | '_ \| '__/ _ \| '_ \| |/ __| |/ _ \  `--. \/ _ \ '__\ \ / / |/ __/ _ \/ 
__|
| \__/\ | | | | | (_) | | | | | (__| |  __/ /\__/ /  __/ |   \ V /| | (_|  __/\__ 
\
 \____/_| |_|_|  \___/|_| |_|_|\___|_|\___| \____/ \___|_|    \_/ 
|_|\___\___||___/
:: Chronicle Services ::      (unknown version) Running under OpenJDK Runtime 
Environment 11.0.17+8-jvmci-22.3-b08 with 8 processors reported.
Process id: 
49368 ...
[main/transactionSvc] INFO Runner - Starting service transactionSvc
[main/transactionDownstream] INFO Runner - Starting service transactionDownstream
[main/transactionUpstream] INFO Runner - Starting service 
transactionUpstream ...
[main/transactionUpstream] INFO Runner - runInitializationComplete 
[main/transactionUpstream] INFO RunLoopControllerMain - running 
transactionUpstream...
[main/transactionSvc] INFO Runner - runInitializationComplete 
[main/transactionSvc] INFO RunLoopControllerMain - running transactionSvc... 
[main/transactionSvc] INFO TransactionSvcImpl - Adding account 34343434 with 
initial balance:
100.0 [main/transactionSvc] INFO TransactionSvcImpl - Adding account 45454545 
with initial balance:
200.0
[main/transactionSvc] INFO TransactionSvcImpl - Applying DEBIT of 100.0 to 
account 34343434
[main/transactionSvc] INFO TransactionSvcImpl - Succeeded: Balance of account 
34343434 is now 0.0
[main/transactionSvc] INFO TransactionSvcImpl - Applying DEBIT of 50.0 to account 
34343434


[main/transactionSvc] INFO TransactionSvcImpl - Bad transaction: Account 34343434 
has
insufficient funds for debit: 50.0 [0.0]
[main/transactionSvc] INFO TransactionSvcImpl - Applying CREDIT of 10.0 to 
account 45454545
[main/transactionSvc] INFO TransactionSvcImpl - Succeeded: Balance of account 
45454545 is now
210.0
[main/transactionSvc] INFO TransactionSvcImpl - Applying CREDIT of 1000.0 to 
account 99999999
[main/transactionSvc] ERROR TransactionSvcImpl - Unknown account number: 99999999
[main/transactionDownstream] INFO Runner - runInitializationComplete 
[main/transactionDownstream] INFO RunLoopControllerMain - running 
transactionDownstream...
[main/transactionDownstream] INFO TransactionSvcDownstream - Success: Balance of 
account 34343434
now 0.0
[main/transactionDownstream] INFO TransactionSvcDownstream - Failed: Insufficient 
funds 0.0
available for 50.0
[main/transactionDownstream] INFO TransactionSvcDownstream - Success: Balance of 
account 45454545
now 210.0
[main/transactionDownstream] ERROR TransactionSvcDownstream - Error for account 
99999999: Unknown
Account Number [MEDIUM]
