 About Microservices
For some time now, software architecture practice has evolved away from building systems as large, self-contained "monoliths" towards a more component focussed approach, via the SOA or "Service Oriented Architecture" to "Microservices". The idea behind this migration is that it allows minimising of coupling between the components of a system, while at the same time attempting to maximise the cohesion of the components themselves.
A more detailed definition of the term Microservices is provided by Martin Fowler here. However, we may consider the ideas to be a refinement of those in SOA. Microservices are more self-contained than the more traditional SOA services, adopting a "share nothing" approach wherever possible. While the name implies that they should be very small, in reality this means "small" in a functional sense rather than necessarily in the code-size sense. Microservices are intended to perform single tasks, in isolation, and to communicate with other microservices using well defined protocols.
We can think of this as the same approach taken by the designers of the Unixâ„¢ family of operating systems, especially with regard to the toolset, its focus on simple tools that perform individual tasks and their ability to connect together through the use of byte streams (either files or pipes) to pass data. This was documented as far back as July 1978 by Doug McIlroy in the foreword of the Bell System Technical Journal where Unix was first reported and has been refined and restated many times since.
However, as systems grow larger and more complex, the ability to manage large numbers of individual components introduces more and more complexity. Microservices by their nature are designed to exist in separate processes, perhaps distributed, across separate machines. Communication between them becomes inter-process communication, which is significantly slower and more error prone than the simple "procedure-call" approach that is used in the traditional monolithic approach. One could argue that Microservices do not remove the complexity of monolithic systems but transfer that complexity to a distributed system which is potentially much more complex.
As a result of this, there is a reluctance among many organisations to adopt the Microservice approach in their systems architecture. However, when we look more closely, Microservices becomes more like a distillation of what are generally considered architecturally good practices, many of which may already be in use in a development team.
At Chronicle, our philosophy is based strongly on the use of Microservices in constructing sophisticated systems, especially in latency sensitive areas such as Financial trading systems. Chronicle Services has evolved to support this approach, providing the capability to implement low-latency, reliable, flexible and extensible microservice based software systems that have been successfully deployed with customers in the Financial Services Industry.
