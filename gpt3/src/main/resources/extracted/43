2.3. Heartbeat Errors
To detect whenever a service has failed, each service maintains a list of its dependencies, and corresponding HeartbeatRecords for each dependency. The HeartbeatRecord has a field lastHeartbeatReceived that is updated with the timestamp from the latest message received from each service.
When the heartbeat timer in the Chronicle infrastructure fires, the service publishes its own Hearbeat message to its output queue. Each of the dependencies is then checked to see if the timeout has expired since the last Heartbeat event from that dependency. If the timeout for a given dependency has not expired, then lastHeartbeatReceived is updated with the timestamp from the incoming message.
If the timeout has expired, then a HeartbeatError message is constructed and published. Should the dependency become available again, as determined by receiving a Heartbeat message from it, these messages will stop, allowing a monitoring application/service to detect the recovery.
2.3.1. Capturing Heartbeat Errors
To be able to capture and act on HeartbeatErrors the serviceâ€™s out should descend from HeartbeatErrorListener:
/**
 * implemented by each component which needs to receive error notifications regarding heartbeats.
 */
public interface HeartbeatErrorListener extends HeartbeatListener {

    void heartbeatError(HeartbeatError heartbeat);
}
