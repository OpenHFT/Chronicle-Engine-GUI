1.3 Testing a Chronicle Service
Problem
You want to test that the service generates the correct output messages when input messages are passed to it.
Solution
Use the Chronicle Services YAMLTester framework.
Discussion
YAMLTester supports interface-based testing of Chronicle Services, by creating a harness that passes messages to an 
instance of the service, and intercepting the corresponding output to verify that it is correct in each case. 
YAMLTester builds on JUnit, and the following additions to the project structure supply the necessary configuration 
to run the tests:
 
Specifying the test case
As this is a simple service we can base our test on a simple use case, namely verifying that for inputs [3,4] the service 
will respond with 7.
We write the input message, and expected output for that message, in YAML files in the directory 
src/test/resources/test/sum
Listing 6. in.yaml - Input messages in YAML
 
9 of 134 | 


 
Listing 7. out.yaml - Expected output in YAML
 
Running the test
The test is run using JUnit, so we need to define a JUnit test case:
Listing 8. JUnit test case to run the YAML test
 
When the test is run, the test harness in YamlTester.testMessages will
1.	Create an instance of the service
2.	Inject an instance of the output interface
3.	Pass the messages in the in.yaml file that is found in the specified directory
4.	Capture the output messages and compare them with the expected output from the out.yaml file.
Tests may be run from the command line using Maven or from the IDE.
Using Maven:
$ mvn test
...
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running SumTest
[main] INFO net.openhft.chronicle.core.Jvm - Chronicle core loaded from
file:/Users/george/.m2/repository/net/openhft/chronicle-core/2.23.35/chronicle-
core-2.23.35.jar
[main] WARN net.openhft.chronicle.wire.GenerateMethodWriter - Generated code to 
call
updateInterceptor for public abstract void
software.chronicle.example1.api.Responder.result(double) will box and generate 
garbage
[main] INFO software.chronicle.example1.services.SumServiceImpl - Processing 
sum(3.0,4.0)
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0, Time elapsed: 
0.835 sec Results :
Tests run: 1, Failures: 0, Errors: 0, Skipped: 0
[INFO] ------------------------------------------------------------------------
[INFO] BUILD SUCCESS
[INFO] ------------------------------------------------------------------------
[INFO] Total time:  2.121 s
[INFO] Finished at: 2022-12-06T08:58:57Z
[INFO] ------------------------------------------------------------------------
  Process finished with exit code 
0 From IntelliJ:
 
If the expected output in the file out.yaml is changed, then the test will fail:
$ mvn test
...
-------------------------------------------------------
 T E S T S
-------------------------------------------------------
Running SumTest
[main] INFO net.openhft.chronicle.core.Jvm - Chronicle core loaded from
file:/Users/george/.m2/repository/net/openhft/chronicle-core/2.23.35/chronicle-
core-2.23.35.jar
[main] WARN net.openhft.chronicle.wire.GenerateMethodWriter - Generated code to 
call
updateInterceptor for public abstract void
software.chronicle.example1.api.Responder.result(double) will box and 
generate garbage [main] INFO 
software.chronicle.example1.services.SumServiceImpl - Processing sum(3.0,4.0)
Tests run: 1, Failures: 1, Errors: 0, Skipped: 0, Time elapsed: 0.817 sec <<< 
FAILURE! testSum(SumTest)  Time elapsed: 0.776 sec  <<< FAILURE!
org.junit.ComparisonFailure: expected:<...ogether
---
sumResult: [8].0
...> but was:<...ogether
---
sumResult: [7].0
...>
    at org.junit.Assert.assertEquals(Assert.java:117)
    at org.junit.Assert.assertEquals(Assert.java:146)
 
Or from IntelliJ:
 
By following the link <Click to see differences> we can examine the differences to diagnose the problem:
 
Clearly the expected output is wrong, so we can fix it and the test will pass.


